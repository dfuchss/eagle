package edu.kit.ipd.eagle.impl.xplore.selection;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import edu.kit.ipd.eagle.port.hypothesis.HypothesisRange;
import edu.kit.ipd.eagle.port.hypothesis.IHypothesesSelection;
import edu.kit.ipd.eagle.port.hypothesis.IHypothesesSet;
import edu.kit.ipd.eagle.port.hypothesis.IHypothesis;
import edu.kit.ipd.eagle.port.xplore.selection.ISelectionProvider;

/**
 * A simple selection provider for {@link HypothesisRange#ELEMENT}. The provider generates selections by using all
 * combinations for all Top1,Top2, .. TopX elements in the hypotheses sets.
 *
 * @author Dominik Fuchss
 *
 */
public class TopXCombinations extends AbstractCombinatoricExploration implements ISelectionProvider {

	private int maxXRanking;

	/**
	 * Create the selection provider.
	 *
	 * @param maxXRanking the maximum amount of selections generated by this provider
	 */
	public TopXCombinations(int maxXRanking) {
		this.maxXRanking = Math.max(1, maxXRanking);
	}

	@Override
	public List<List<IHypothesesSelection>> findSelection(List<IHypothesesSet> hypotheses) {
		List<IHypothesesSet> topX = filterHypotheses(hypotheses);
		return generateSelections(topX);
	}

	private List<IHypothesesSet> filterHypotheses(List<IHypothesesSet> hypotheses) {
		List<IHypothesesSet> filtered = new ArrayList<>();

		for (IHypothesesSet set : hypotheses) {
			filtered.add(filterSet(set));
		}

		return filtered;
	}

	private IHypothesesSet filterSet(IHypothesesSet hypothesesSet) {
		List<IHypothesis> hypotheses = hypothesesSet.getHypotheses().stream().limit(maxXRanking).collect(Collectors.toList());
		logger.debug("new hypotheses: " + hypotheses);
		IHypothesesSet newSet = hypothesesSet.withHypotheses(hypotheses);
		logger.debug("filtered hypotheses set: " + hypothesesSet);
		return newSet;
	}

}
